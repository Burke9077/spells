#!/bin/bash

set -eux

. "$CONJURE_UP_SPELLSDIR/sdk/common.sh"

export KUBECONFIG=$HOME/.kube/config.$JUJU_MODEL

install_deis_cli() {
    echo "Installing Deis CLI"
    curl -fsSL -o $HOME/bin/deis  https://storage.googleapis.com/workflow-cli-release/deis-stable-linux-amd64
    chmod +x $HOME/bin/deis
}

install_helm() {
    WORK_DIR=`mktemp -d`

    echo "Installing Helm CLI"
    HELM_VERSION="v2.6.0"
    curl -fsSL -o $WORK_DIR/helm-stable.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-"$HELM_VERSION"-linux-amd64.tar.gz
    tar -C $WORK_DIR -zxvf $WORK_DIR/helm-stable.tar.gz
    mv $WORK_DIR/linux-amd64/helm $HOME/bin/helm

    init_count=0
    while ! helm init --upgrade; do
        if [[ "$init_count" -gt 5 ]]; then
            break
        fi
        ((init_count=init_count+1))
        sleep 5
    done
    rm -rf "$WORK_DIR"
}

check_ready_replicas() {
    local ready_replicas="$(kubectl -n kube-system get deployment tiller-deploy -o json|jq '.status.readyReplicas // 0')"
    local replicas="$(kubectl -n kube-system get deployment tiller-deploy -o json|jq '.status.replicas // 0')"
    [[ "$ready_replicas" -eq "$replicas" ]]
}

wait_for_tiller() {
    wait_replica_ready=0
    while ! check_ready_replicas; do
        echo "Waiting for tiller pod to become ready (try $wait_replica_ready/15)"
        if [[ "$wait_replica_ready" -gt 15 ]]; then
            break
        fi
        ((wait_replica_ready=wait_replica_ready+1))
        sleep 10
    done
}

install_deis(){
    echo "Adding Deis chart"
    helm repo add deis https://charts.deis.com/workflow

    echo "Install Deis workflow"
    helm install deis/workflow --namespace deis \
         --set global.use_cni=true
}

enable_deis() {
    install_deis_cli
    install_helm
    wait_for_tiller
    install_deis
    setKey "deis-register-url" "http://deis.$hostname.nip.io"
    setKey "deis-elb-host" "$hostname.nip.io"

}
